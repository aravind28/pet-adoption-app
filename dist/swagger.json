{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Sample spec",
    "description": "Sample spec for Swagger",
    "termsOfService": "http://swagger.io/terms/"
  },
  "basePath": "/",
  "tags" : [
    {"name": "Users",
      "description": "API for Users"
    },
    {"name": "Pets", 
      "description": "API for Pets"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    ""
  ],
  "produces": [
    "json"
  ],
  "paths": {
    "/msdproject/project/user/login":{
      "post": {
        "tags": ["Users"],
        "description": "Checks user login",
        "operationId": "for the URL",
        "produces": ["json"],
        "parameters":[
          {
            "name": "Job Parameters",
            "in": "body",
            "description": "Job to check User credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logs in an user if s/he has valid credentials",
            "schema": {
              "$ref": "#/definitions/successResponse"
            }
          },
          "400":{
            "description": "Error Logging in a User",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/msdproject/project/user/logout":{
      "post": {
        "tags": ["Users"],
        "description": "Logs out a User",
        "oprationId": "for the URL",
        "parameters": [
          {
            "description": "Job to logout a User"
          }
        ],
        "responses": {
          "200": {
            "description": "Logs out a user",
            "schema": {
              "$ref": "#/definitions/successResponse"
            }
          },
          "400":{
            "description": "Error Logging out a user",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/msdproject/project/user/loggedin":{
      "get": {
        "tags": ["Users"],
        "description": "Checks if the user is logged in. Used for session management.",
        "operationId": "for the URL",
        "produces": [],
        "parameters": [
          {
            "description": "Job to check if User is logged in"
          }
        ],
        "responses": {
          "200": {
            "description": "Maintains a session if user is logged in with valid credentials",
            "schema": {
              "$ref": "#/definitions/successResponse"
            }
          },
          "400":{
            "description": "Error if user is not logged-in",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/msdapi/project/user":{
      "post": {
        "tags": ["Users"],
        "description": "Creates a new User",
        "operationId": "for the URL",
        "produces": ["json"],
        "parameters":[
          {
            "name": "Job Parameters",
            "in": "body",
            "description": "Job to create a new User",
            "required": true,
            "schema":{
              "$ref": "#/definitions/createUser"
            }
          }
        ],
        "response": {
          "200": {
            "description": "Creates a new user",
            "schema": {
              "$ref": "#/definitions/successResponse"
            }
          },
          "400":{
            "description": "Error creating a user",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/msdapi/project/user/:id":{
      "put":{
        "tags": ["Users"],
        "description": "Update details of an user",
        "operationId": "for the URL",
        "produces": ["json"],
        "parameters": [
          {
            "name": "Job Parameters",
            "in": "body",
            "description": "Job to Update details of an existing User",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updates the details of an existing User successfully",
            "scehma": {
              "$ref": "#/definitions/successResponse"
            }
          },
          "400":{
            "description": "Error Updating details of a user",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "description": "Deletes a User",
        "operationId": "delete",
        "produces": ["json"],
        "parameters":[
          {
            "name": "Id",
            "in": "path",
            "description": "To delete a User",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a User successfully",
            "schema": {
              "$ref": "#/definitions/successResponse"
            }
          },
          "400":{
            "description": "Error Deleting a user",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/msdapi/project/pet": {
       "post": {
          "tags": ["Pets"],
          "description": "This api creates a pet in the database",
          "operationId": "for the URL",
          "produces": [
            "application/json"
          ],
          "parameters": [
              {
                "name": "Job Parameters",
                "in": "body",
                "description": "Job to add to the database",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/createPet"
                }
            }
          ],
          "responses": {
            "200": {
              "description": "a json of the pet created",
              "schema": {
                 "$ref": "#/definitions/400error"
              }
            }
          }
        }
    },
    "/msdapi/project/pet/:id": {
        "delete":{
          "tags":["Pets"],
          "description":"Deletes a pet based on its id",
          "operationId":"delete",
          "produces": [
            "application/json"
          ],
          "parameters":[
              {
                "name": "someVariable",
                "in": "path",
                "description": "ID to delete",
                "required": true,
                "type": "string",
                "schema": {
                "$ref": "#/definitions/deletePet"
                }
              }
            ],
          "responses": {
            "200": {
              "description": "delete response",
              "schema":{
                "$ref":"#/definitions/deleteRes"
              }
            }
          }
        },
      "get":{
          "tags": [ "Pets"],
          "description": "Returns the status of a pet",
          "operationId": "findById",
          "produces": [
            "application/json"
          ],
          "parameters": [
              {
                "name": "ID",
                "in": "path",
                "description": "ID to fetch",
                "required": false,
                "type": "string",
                "schema": {
                  "$ref": "#/definitions/getById"
                }
              }
            ],
        "responses": {
            "200": {
              "description": "response",
              "schema": {
                "$ref": "#/definitions/response1"
              }
            }
          }
        }
      },
    "/msdapi/project/listAllPets": {
        "get": {
          "tags": ["Pets"],
          "description": "Lists all the pets in the database",
          "operationId": "getAllPets",
          "produces": [
            "application/json"
          ],
          "parameters": [
              {
                "schema": {
                  "$ref": "#/definitions/getAllPets"
                } 
              }
          ],
          "responses": {
            "200":{
                "description": "response"
            }
          }
        }
    },
    "msdapi/project/:category": {
      "get": {
          "tags": ["Pets"],
          "description": "Lists all the pets in the category, irrrespective of availability",
          "operationId": "getPetsByAvailability",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "schema": {
                "$ref": "#/definitions/getByCategory"
              }
            }
          ],
          "response": {
            "200": {

            }
          }
      }
    }
  },
  "definitions": {
    "createPet": {
      "properties": {
        "petName": {
          "required":true,
          "type": "string",
          "example": "Drake"
        },
        "petGender": {
          "required":true,
          "type":"string",
          "example": "male"
        },
        "petAge": {
          "required":true,
          "type":"int",
          "exampe":4 
        },
        "petCategory": {
          "required":true,
          "type":"string",
          "example":"dog"
        },
        "petAvailability":{
          "required":true,
          "type":"boolean",
          "example":true
        },
        "adoptedBy": {
          "required":true,
          "type":"string",
          "example":"name1"
        },
        "favourites": {
          "required":true,
          "type":"string",
          "example":"name1, name2"
        },
        "userFavourites": {
          "required":true,
          "type":"string",
          "example":"name1, name2"
        }
      }
    },
    "getById": {
        "properties": {
          "petId":{
              "type":"string",
              "example":"idOfPet"
            }
        }
    },
    "deletePet": {
        "properties": {
          "petId":{
              "type":"string",
              "example":"idOfAnPet"
            }
        } 
    },
    "getByCategory": {
        "properties": {
            "petCategory": {
              "type": "String",
              "example": "Dog"
            }
        }
    },
    "400error" : {
       "properties": {
        "message": {
          "type": "string",
          "example" : "400 Bad Request"
        }
      }
    },
    "successResponse": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Success"
        }
      }
    },
    "errorResponse": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Error"
        }
      }
    },
    "loginUser": {
      "properties": {
        "username": {
          "required": true,
          "type": "string",
          "example": "alice"
        },
        "password": {
          "required": true,
          "type": "string",
          "example": "eve"
        }
      }
    },
    "createUser": {
      "properties": {
        "firstName": {
          "required": true,
          "type": "string",
          "example": "alice"
        },
        "lastName": {
          "required": true,
          "type": "string",
          "example": "eve"
        },
        "password": {
          "required": true,
          "type": "string",
          "example": "aliceeve"
        },
        "emails": {
          "required": true,
          "type": "string array",
          "example": "alice@eve.com, aliceeve@dummy.com"
        },
        "phones": {
          "required": true,
          "type": "string array",
          "example": "111-111-1111, 222-222-2222"
        }
      }
    },
    "updateUser": {
      "username": {
        "required": true,
        "type": "string",
        "example": "alice123"
      },
      "password": {
        "required": true,
        "type": "string",
        "example": "eve123"
      },
      "firstName": {
        "required": true,
        "type": "string",
        "example": "alice"
      },
      "lastName": {
        "required": true,
        "type": "string",
        "example": "eve"
      },
      "emails": {
        "required": true,
        "type": "string array",
        "example": "alice@eve.com"
      },
      "phones": {
        "required": true,
        "type": "string array",
        "example": "111-111-1111"
      }
    }
  }
}