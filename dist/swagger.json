{
  "swagger": "2.0",

  "info": {
    "version": "1.0.0",
    "title": "Sample spec",
    "description": "Sample spec for Swagger",
    "termsOfService": "http://swagger.io/terms/"
  },

  "basePath": "/",

  "tags" : [
    {"name": "Users",
      "description": "API for Users"
    },
    {"name": "Pets",
      "description": "API for Pets"
    },
    {"name": "Question",
      "description": "API for creating and deleting questions"
    },
    {
      "name": "Comment",
      "description": "API for creating and retrieving comments"
    }
  ],

  "schemes": [
    "https"
  ],

  "consumes": [
    "application/json"
  ],

  "produces": [
    "application/json"
  ],

  "paths": {
    "/msdapi/project/user":{
      "post": {
        "tags": ["Users"],
        "description": "Creates a new User",
        "operationId": "for the URL",
        "produces": ["json"],
        "parameters":[
          {
            "name": "Job Parameters",
            "in": "body",
            "description": "Job to create a new User",
            "required": true,
            "schema":{
              "$ref": "#/definitions/createUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Creates a new user",
            "schema": {
              "$ref": "#/definitions/successResponseCreateUser"
            }
          },
          "400":{
            "description": "Error creating a user",
            "schema": {
              "$ref": "#/definitions/errorResponseCreateUser"
            }
          }
        }
      },
      "get": {
        "tags": ["Users"],
        "description": "Gets all Users",
        "operationId": "getAllUsers",
        "produces": ["application/json"],
        "parameters": [
          {
            "scehma": {
              "$ref": "#/definitions/getAllUsers"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lists all Users",
            "scehma": {
              "$ref": "#/definitions/successResponse"
            }
          },
          "400": {
            "description": "No users present",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },

    "/msdapi/project/user/{id}":{
      "get":{
        "tags": ["Users"],
        "description": "Get a User by ID",
        "operationId": "for the URL",
        "produces": ["json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the user to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Updates the details of an existing User successfully",
            "schema": {
              "$ref": "#/definitions/successResponse"
            }
          },
          "400":{
            "description": "Error Updating details of a user",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "put":{
        "tags": ["Users"],
        "description": "Update details of an user",
        "operationId": "for the URL",
        "produces": ["json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the user to be updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "User",
            "in": "body",
            "description": "the updated User object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updates the details of an existing User successfully",
            "schema": {
              "$ref": "#/definitions/successResponseUpdateUser"
            }
          },
          "400":{
            "description": "Error Updating details of a user",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "description": "Deletes a User",
        "operationId": "delete",
        "produces": ["json"],
        "parameters":[
          {
            "name": "id",
            "in": "path",
            "description": "the id of the user to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete a User successfully"
          },
          "400":{
            "description": "Error Deleting a user"
          }
        }
      }
    },

    "/msdapi/project/user/login":{
      "post": {
        "tags": ["Users"],
        "description": "Checks user login",
        "operationId": "for the URL",
        "produces": ["json"],
        "parameters":[
          {
            "name": "Job Parameters",
            "in": "body",
            "description": "Job to check User credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logs in an user if s/he has valid credentials",
            "schema": {
              "$ref": "#/definitions/successResponse"
            }
          },
          "400":{
            "description": "Error Logging in a User",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },

    "/msdapi/project/user/logout":{
      "post": {
        "tags": ["Users"],
        "description": "Logs out a User",
        "oprationId": "for the URL",
        "parameters": [
          {
            "description": "Job to logout a User"
          }
        ],
        "responses": {
          "200": {
            "description": "Logs out a user",
            "schema": {
              "$ref": "#/definitions/successResponse"
            }
          },
          "400":{
            "description": "Error Logging out a user",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },

    "/msdapi/project/user/loggedin":{
      "get": {
        "tags": ["Users"],
        "description": "Checks if the user is logged in. Used for session management.",
        "operationId": "for the URL",
        "produces": [],
        "parameters": [
          {
            "description": "Job to check if User is logged in"
          }
        ],
        "responses": {
          "200": {
            "description": "Maintains a session if user is logged in with valid credentials",
            "schema": {
              "$ref": "#/definitions/successResponse"
            }
          },
          "400":{
            "description": "Error if user is not logged-in",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },

    "/msdapi/project/petFavoriteList": {
      "post": {
        "tags": ["Users"],
        "description": "This api creates a favorite list for user to watch",
        "operationId": "for the URL",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Favorite Object",
            "in": "body",
            "description": "petID and userId to add to favorite list",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createFavoriteList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "a json of the pet created",
            "schema": {
              "$ref": "#/definitions/successResponseFavoriteList"
            }
          }
        }
      }
    },

    "/msdapi/project/pet": {
      "post": {
        "tags": ["Pets"],
        "description": "This api creates a pet in the database",
        "operationId": "for the URL",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Pet Object",
            "in": "body",
            "description": "Pet to add to the database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createPet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "a json of the pet created",
            "schema": {
              "$ref": "#/definitions/successResponseCreatePet"
            }
          }
        }
      }
    },

    "/msdapi/project/pet/{id}": {
      "delete":{
        "tags":["Pets"],
        "description":"Deletes a pet based on its id",
        "operationId":"delete",
        "produces": [
          "application/json"
        ],
        "parameters":[
          {
            "name": "id",
            "in": "path",
            "description": "the id of the pet to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response"
          }
        }
      },
      "get":{
        "tags": [ "Pets"],
        "description": "Returns the status of a pet",
        "operationId": "findById",
        "produces": ["json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "pass the Id to fetch in the URL parameter",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/pet"
            }
          }
        }
      },
      "put": {
        "tags": ["Pets"],
        "description": "This api modifies a pet in the database",
        "operationId": "for the URL",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the pet to be updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "Pet",
            "in": "body",
            "description": "the updated Pet Object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createPet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "a json of the pet modified",
            "schema": {
              "$ref": "#/definitions/successResponseUpdatePet"
            }
          }
        }
      }
    },

    "/msdapi/project/listAllPets": {
      "get": {
        "tags": ["Pets"],
        "description": "Lists all the pets in the database",
        "operationId": "getAllPets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/getAllPets"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "lists all the pets in json format"
          }
        }
      }
    },

    "/msdapi/project/pet/availability/{availability}": {
      "get": {
        "tags": ["Pets"],
        "description": "Lists all the pets with the given availability",
        "operationId": "getPetByAvailability",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "availability",
            "in": "path",
            "description": "availability of the pets that you want to search",
            "required": true,
            "type": "boolean"
          }
        ],
        "response": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/pet"
            }
          }
        }
      }
    },

    "/msdapi/project/pet/category/{category}": {
      "get": {
        "tags": ["Pets"],
        "description": "Lists all the pets that match the given category",
        "operationId": "getPetByCategory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "description": "category of the pets that you want to search, like cat, dog or fish",
            "required": true,
            "type": "string"
          }
        ],
        "response": {
          "200": {
            "description": "response",
            "schema": {
              "$ref": "#/definitions/pet"
            }
          }
        }
      }
    },

    "/msdapi/project/user/{userId}/question": {
      "post": {
        "tags":["Question"],
        "description": "Create a new question object for the given user",
        "operationId": "createQuestion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Question Body",
            "in": "body",
            "description": "The new question to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createQuestion"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user who posted the question",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A unique question ID will be returned after creating a question",
            "schema": {
              "$ref": "#/definitions/createQuestionResponse"
            }
          }
        }
      }
    },

    "/msdapi/project/question/{questionId}": {
      "delete":{
        "tags":["Question"],
        "description":"Deletes a question",
        "operationId":"deleteQuestion",
        "produces": [
          "application/json"
        ],
        "parameters":[
          {
            "name": "questionId",
            "in": "path",
            "description": "ID of the question to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "delete response"
          }
        }
      },
      "get": {
        "tags": [ "Question"],
        "description": "Retrieve a question object",
        "operationId": "getQuestionById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "ID of the question to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A question object",
            "schema": {
              "$ref": "#/definitions/question"
            }
          }
        }
      }
    },

    "/msdapi/project/pet/{userId}/comments": {
      "post": {
        "tags": [
          "Comment"
        ],
        "description": "Create a new comment object",
        "operationId": "createComment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Comment Body",
            "in": "body",
            "description": "The new comment to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createComment"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user who posted the comment",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A unique comment ID will be returned after creating a question",
            "schema": {
              "$ref": "#/definitions/createCommentResponse"
            }
          }
        }
      }
    },

    "/msdapi/project/user/{userId}/comments": {
      "get": {
        "tags": [
          "Comment"
        ],
        "description": "Retrieve a list of comments for the given user",
        "operationId": "getCommentForUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The comments posted by the user with the given userId",
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        }
      }
    },

    "/msdapi/project/pet/{petId}/comments": {
      "get": {
        "tags": [
          "Comment"
        ],
        "description": "Retrieve a list of comments for the given pet",
        "operationId": "getCommentForPet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of the pet",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The comments posted to the pet with the given Id",
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        }
      }
    },

    "/msdapi/project/comments/{commentId}": {
      "get": {
        "tags": [
          "Comment"
        ],
        "description": "Retrieve a comment object with the given ID",
        "operationId": "getComment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "ID of the comment to be retrieved",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The comment with the requested ID",
            "schema": {
              "$ref": "#/definitions/comment"
            }
          }
        }
      }
    }
  },

  "definitions": {
    "createUser": {
      "properties": {
        "username": {
          "required": true,
          "type": "string",
          "example": "name5"
        },
        "password": {
          "required": true,
          "type": "string",
          "example": "name5"
        },
        "firstName": {
          "required": true,
          "type": "string",
          "example": "fn5"
        },
        "lastName": {
          "required": true,
          "type": "string",
          "example": "ln5"
        },
        "emails": {
          "required": true,
          "type": "[strings]",
          "example": "name5@name.com"
        },
        "phones": {
          "required": true,
          "type": "[strings]",
          "example": ["206"]
        },
        "favorites": {
          "required": true,
          "type": "[strings]",
          "example" : []
        },
        "notifications": {
          "required": true,
          "type": "[strings]",
          "example":[]
        }
      }
    },

    "createFavoriteList": {

      "properties": {
        "userId": {
          "required": true,
          "type": "string",
          "example": "583f929ac1bc4d0ed0c2aa78"
        },
        "petId": {
          "required": true,
          "type": "string",
          "example": "583f933ec1bc4d0ed0c2aa7a"
        }
      }
    },

    "successResponseCreateUser": {
      "properties": {
        "username": {
          "type": "string",
          "example": "name5"
        },
        "password": {
          "type": "string",
          "example": "$2a$10$aMh.RHL7W7kLIIa05pSMR.7H36/LCc5nOT84wAq4qM.lUvfd5dE6C"
        },
        "firstName": {
          "type": "string",
          "example": "fn5"
        },
        "lastName": {
          "type": "string",
          "example": "ln5"
        },
        "id":{
          "type": "string",
          "example":"5840dd847079250d3ba4bd14"
        },
        "notifications": {
          "type": "[string-array]",
          "example":[]
        },
        "favorites": {
          "type": "[string-array]",
          "example" : []
        },
        "phones": {
          "type": "string array",
          "example": ["206"]
        },
        "emails": {
          "type": "[strings]",
          "example": "name5@name.com"
        },
        "roles":{
          "type": "[strings]",
          "example":"[standard]"
        }
      }
    },

    "errorResponseCreateUser": {
      "properties": {
        "message": {
          "type": "string",
          "example": "null"
        }
      }
    },

    "successResponseFavoriteList":{
      "properties": {
        "id":{
          "type": "string",
          "example":"5840dd847079250d3ba4bd14"
        },
        "username": {
          "type": "string",
          "example": "name5"
        },
        "password": {
          "type": "string",
          "example": "$2a$10$aMh.RHL7W7kLIIa05pSMR.7H36/LCc5nOT84wAq4qM.lUvfd5dE6C"
        },
        "firstName": {
          "type": "string",
          "example": "fn5"
        },
        "lastName": {
          "type": "string",
          "example": "ln5"
        },
        "notifications": {
          "type": "[string-array]",
          "example":[]
        },
        "favorites": {
          "type": "[string-array]",
          "example" : ["583f933ec1bc4d0ed0c2aa7a", "583f9343c1bc4d0ed0c2aa7b"]
        },
        "phones": {
          "type": "string array",
          "example": ["206"]
        },
        "emails": {
          "type": "[strings]",
          "example": "name5@name.com"
        },
        "roles":{
          "type": "[strings]",
          "example":"[standard]"
        }
      }
    },

    "updateUser": {
      "properties": {
        "username": {
          "required": true,
          "type": "string",
          "example": "name5"
        },
        "password": {
          "required": true,
          "type": "string",
          "example": "new_name5"
        },
        "firstName": {
          "required": true,
          "type": "string",
          "example": "fn5"
        },
        "lastName": {
          "required": true,
          "type": "string",
          "example": "ln5"
        },
        "emails": {
          "required": true,
          "type": "[strings",
          "example": "name5@name.com"
        },
        "phones": {
          "required": true,
          "type": "[strings]",
          "example": ["317"]
        },
        "favorites": {
          "required": true,
          "type": "[strings]",
          "example" : []
        },
        "notifications": {
          "required": true,
          "type": "[strings]",
          "example":[]
        }
      }
    },

    "successResponseUpdateUser": {
      "properties": {
        "username": {
          "type": "string",
          "example": "name5"
        },
        "password": {
          "type": "string",
          "example": "$2a$10$BTe8fDVhvhFM06g11bBSZuXKTxXU.rOtYRascuC2ATkedD1lr1cO2"
        },
        "firstName": {
          "type": "string",
          "example": "fn5"
        },
        "lastName": {
          "type": "string",
          "example": "ln5"
        },
        "id":{
          "type": "string",
          "example":"5840dd847079250d3ba4bd14"
        },
        "notifications": {
          "type": "[string-array]",
          "example":[]
        },
        "favorites": {
          "type": "[string-array]",
          "example" : []
        },
        "phones": {
          "type": "string array",
          "example": ["317"]
        },
        "emails": {
          "type": "[strings]",
          "example": "name5@name.com"
        },
        "roles":{
          "type": "[strings]",
          "example":"[standard]"
        }
      }
    },

    "createPet": {
      "properties": {
        "petName": {
          "required":true,
          "type": "string",
          "example": "pet4"
        },
        "petGender": {
          "required":true,
          "type":"string",
          "example": "male"
        },
        "petAge": {
          "required":true,
          "type":"Number",
          "example":2
        },
        "petCategory": {
          "required":true,
          "type":"string",
          "example":"dog"
        },
        "petAvailability":{
          "required":true,
          "type":"boolean",
          "example":true
        },
        "adoptedBy": {
          "required":true,
          "type":"string",
          "example":""
        },
        "favorites": {
          "required":true,
          "type":"[string]",
          "example":"[]"
        }
      }
    },

    "successResponseCreatePet": {
      "properties": {
        "petName": {
          "type": "string",
          "example": "pet4"
        },
        "petGender": {
          "type":"string",
          "example": "male"
        },
        "petAge": {
          "type":"Number",
          "example":2
        },
        "petCategory": {
          "type":"string",
          "example":"dog"
        },
        "petAvailability":{
          "type":"boolean",
          "example":true
        },
        "adoptedBy": {
          "type":"string",
          "example":""
        },
        "id": {
          "type":"string",
          "example":"5840e8fb7079250d3ba4bd15"
        },
        "favorites": {
          "type":"[string]",
          "example":"[]"
        }
      }
    },

    "successResponseUpdatePet" : {
      "properties": {
        "petName": {
          "type": "string",
          "example": "pet4"
        },
        "petGender": {
          "type":"string",
          "example": "male"
        },
        "petAge": {
          "type":"Number",
          "example":2
        },
        "petCategory": {
          "type":"string",
          "example":"dog"
        },
        "petAvailability":{
          "type":"boolean",
          "example":true
        },
        "adoptedBy": {
          "type":"string",
          "example":""
        },
        "id": {
          "type":"string",
          "example":"5840e8fb7079250d3ba4bd15"
        },
        "favorites": {
          "type":"[string]",
          "example":"[]"
        }
      }
    },

    "getById": {
      "properties": {
        "petId":{
          "type":"string",
          "example":"idOfPet"
        }
      }
    },

    "getAllPets": {
      "properties": {
        "petId":{
          "type":"string",
          "example":"nothing to pass as paramater"
        }
      }
    },

    "pet": {
      "properties": {
        "petName": {
          "required":true,
          "type": "string",
          "example": "pet4"
        },
        "petGender": {
          "required":true,
          "type":"string",
          "example": "male"
        },
        "petAge": {
          "required":true,
          "type":"Number",
          "example":2
        },
        "petCategory": {
          "required":true,
          "type":"string",
          "example":"dog"
        },
        "petAvailability":{
          "required":true,
          "type":"boolean",
          "example":true
        },
        "adoptedBy": {
          "required":true,
          "type":"string",
          "example":""
        },
        "favorites": {
          "required":true,
          "type":"[string]",
          "example":"[]"
        }
      }
    },

    "deletePet": {
      "properties": {
        "petId":{
          "type":"string",
          "example":"pass id of a pet in the parameter of the url"
        }
      }
    },

    "getByCategory": {
      "properties": {
        "petCategory": {
          "type": "String",
          "example": "Dog"
        }
      }
    },

    "400error" : {
      "properties": {
        "message": {
          "type": "string",
          "example" : "400 Bad Request"
        }
      }
    },

    "loginUser": {
      "properties": {
        "username": {
          "required": true,
          "type": "string",
          "example": "alice"
        },
        "password": {
          "required": true,
          "type": "string",
          "example": "eve"
        }
      }
    },

    "createQuestion": {
      "properties": {
        "title": {
          "required":true,
          "type": "string",
          "example": "How can I adopt a cat?"
        },
        "content": {
          "required":true,
          "type":"string",
          "example": "Could anyone show me the steps to adopt a pet?"
        }
      }
    },

    "createQuestionResponse": {
      "properties": {
        "questionId": {
          "required": true,
          "type" : "string",
          "example" : "12321432423"
        }
      }
    },

    "question": {
      "properties": {
        "userId": {
          "required":true,
          "type": "string",
          "example": "user12345"
        },
        "title": {
          "required":true,
          "type": "string",
          "example": "How can I adopt a cat?"
        },
        "content": {
          "required":true,
          "type":"string",
          "example": "Could anyone show me the steps to adopt a pet?"
        }
      }
    },

    "deleteQuestion": {
      "properties": {
        "questionId": {
          "required": true,
          "type" : "string",
          "example" : "234344234234"
        }
      }
    },

    "createCommentResponse": {
      "properties": {
        "commentId": {
          "required": true,
          "type": "string",
          "example": "123456"
        }
      }
    },

    "createComment": {
      "properties": {
        "comments": {
          "required": true,
          "type": "string",
          "example": "This is a sample comment."
        },
        "userId": {
          "required": true,
          "type": "string",
          "example": "5840dd847079250d3ba4bd14"
        },
        "emails": {
          "required": false,
          "example": "[12345@gmail.com]"
        },
        "petId": {
          "required": true,
          "type": "string",
          "example": "5840e8fb7079250d3ba4bd15"
        }
      }
    }
  }
}